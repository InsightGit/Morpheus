//
// Created by bobby on 21/06/2021.
//

#ifndef MORPHEUS_GBA_TEST_FONT_HPP
#define MORPHEUS_GBA_TEST_FONT_HPP

#include <map>

#include <core/gfx/vector_2.hpp>

#include "sys8.h"

namespace morpheus {
    namespace core {
        namespace gfx {
            enum class FontBpp {
                FONT_1BPP, ///< 1 bit per pixel or a 2 color font
                FONT_4BPP, ///< 4 bits per pixel or a 16 color font
                FONT_8BPP ///< 8 bits per pixel or a 256 color font
            };


            /// \enum morpheus::core::gfx::FontBpp
            /// The current BPP (bits per pixel) depth of this Font's graphical
            /// tiles.

            class Font {
            public:
                /// Constructs a default Font based on tonc's sys8 font graphics.
                Font() {
                    set_common_characteristics(sys8Pal, sys8PalLen, sys8Tiles, sys8TilesLen, Vector2(1, 1),
                                               FontBpp::FONT_1BPP, false);

                    m_ascii_offset = 32;
                    m_new_line_ascii_code = 10;
                    m_space_ascii_code = 32;
                    m_use_utf8 = false;
                }

                /// Constructs a custom ASCII-based Font.
                /// \param font_palette The color palette buffer of the new Font
                /// \param font_palette_len The length of the color palette
                /// buffer
                /// \param font_tiles The grit generated tile graphics buffer of
                /// the new Font
                /// \param font_tiles_len The length of the grit generated tile
                /// graphics buffer.
                /// \param char_size The size of each text character within this
                /// Font (in 8x8 TILES, not PIXELS)
                /// \param font_bpp The BPP depth of this Font
                /// \param is_2d_mapping Whether this Font's tile graphics are
                /// using 2D mapping or not (should be set to false for fonts
                /// with Vector2(1, 1)-sized fonts).
                /// \param ascii_offset The offset within an unsigned ASCII
                /// table for which this Font's character graphics start
                /// (usually 32, the ASCII code for the space character)
                /// \param new_line_ascii_code The new line ASCII code to use.
                /// \param space_ascii_code The space ASCII code to use.
                Font(const unsigned short *font_palette, const unsigned int font_palette_len,
                     const unsigned int *font_tiles, const unsigned int font_tiles_len, const Vector2 &char_size,
                     FontBpp font_bpp, bool is_2d_mapping, unsigned int ascii_offset,
                     unsigned int new_line_ascii_code = 10, unsigned int space_ascii_code = 32) {
                    set_common_characteristics(font_palette, font_palette_len, font_tiles, font_tiles_len,
                                               char_size, font_bpp, is_2d_mapping);

                    m_ascii_offset = ascii_offset;
                    m_new_line_ascii_code = new_line_ascii_code;
                    m_space_ascii_code = space_ascii_code;
                    m_use_utf8 = false;
                }

                /// Constructs a custom UTF8-based Font.
                /// \param font_palette The color palette buffer of the new Font
                /// \param font_palette_len The length of the color palette
                /// buffer
                /// \param font_tiles The grit generated tile graphics buffer of
                /// the new Font
                /// \param font_tiles_len The length of the grit generated tile
                /// graphics buffer.
                /// \param char_size The size of each text character within this
                /// Font (in 8x8 TILES, not PIXELS)
                /// \param font_bpp The BPP depth of this Font
                /// \param is_2d_mapping Whether this Font's tile graphics are
                /// using 2D mapping or not (should be set to false for fonts
                /// with Vector2(1, 1)-sized fonts).
                /// \param utf8_map Map (usually generated by
                /// buildtools/generate_fonts/generate_fonts.py) that maps UTF8
                /// character values to tile ids of the first representative
                /// character tile.
                Font(const unsigned short *font_palette, const unsigned int font_palette_len,
                     const unsigned int *font_tiles, const unsigned int font_tiles_len, const Vector2 &char_size,
                     FontBpp font_bpp, bool is_2d_mapping, const std::map<unsigned int, unsigned int> &utf8_map) {
                    set_common_characteristics(font_palette, font_palette_len, font_tiles, font_tiles_len,
                                               char_size, font_bpp, is_2d_mapping);

                    m_use_utf8 = true;
                    m_utf8_map = utf8_map;
                }

                /// \return The ASCII offset of this ASCII-based Font.
                /// If this Font is a UTF8-based Font, this value returned will
                /// be meaningless.
                unsigned int get_ascii_offset() const {
                    return m_ascii_offset;
                }

                /// \return The size of character in 8x8 tiles within this Font.
                const Vector2 &get_char_size() const {
                    return m_char_size;
                }

                /// \return This Font graphical tiles' BPP depth.
                FontBpp get_font_bpp() const {
                    return m_font_bpp;
                }

                /// \return This Font's color palette buffer.
                const unsigned short *get_font_palette() const {
                    return m_font_palette;
                }

                /// \return The length of this Font's color palette buffer.
                unsigned int get_font_palette_len() const {
                    return m_font_palette_len;
                }

                /// \return This Font's graphical tile buffer.
                const unsigned int *get_font_tiles() const {
                    return m_font_tiles;
                }

                /// \return The length of this Font's graphical tile buffer.
                unsigned int get_font_tiles_len() const {
                    return m_font_tiles_len;
                }

                /// \return The ASCII code for this ASCII-based Font's new line
                /// code. If this Font is an UTF8-based Font, this value will be
                /// meaningless.
                unsigned int get_new_line_ascii_code() const {
                    return m_new_line_ascii_code;
                }

                /// \return The ASCII code for this ASCII-based Font's space
                /// code. If this Font is an UTF8-based Font, this value will be
                /// meaningless.
                unsigned int get_space_ascii_code() const {
                    return m_space_ascii_code;
                }


                /// \return The UTF8 character to first character tile id for
                /// this UTF8-based Font. If this Font is an ASCII-based Font,
                /// this value will be meaningless and most likely empty.
                const std::map<unsigned int, unsigned int> &get_utf8_map() const {
                    return m_utf8_map;
                }

                /// \return Whether this Font graphical tiles are using 2D
                /// mapping.
                bool is_using_2d_mapping() const {
                    return m_is_2d_mapping;
                }

                /// \return Whether this Font is a UTF8-based Font (true) or an
                /// ASCII-based Font (false).
                bool is_using_utf8() const {
                    return m_use_utf8;
                }
            private:
                void set_common_characteristics(const unsigned short *font_palette, const unsigned int font_palette_len,
                                                const unsigned int *font_tiles, const unsigned int font_tiles_len,
                                                const Vector2 &char_size, FontBpp font_bpp, bool is_2d_mapping) {
                    m_char_size = char_size;
                    m_font_bpp = font_bpp;
                    m_font_palette = font_palette;
                    m_font_palette_len = font_palette_len;
                    m_font_tiles = font_tiles;
                    m_font_tiles_len = font_tiles_len;
                    m_is_2d_mapping = is_2d_mapping;
                }

                const unsigned short *m_font_palette;
                unsigned int m_font_palette_len;
                const unsigned int *m_font_tiles;
                unsigned int m_font_tiles_len;

                unsigned int m_ascii_offset;
                Vector2 m_char_size; // Char size (in tiles, NOT pixels)
                FontBpp m_font_bpp;
                bool m_is_2d_mapping;
                unsigned int m_new_line_ascii_code;// = 10;
                unsigned int m_space_ascii_code; //= 32;
                bool m_use_utf8;
                std::map<unsigned int, unsigned int> m_utf8_map;
            };


            /// \class morpheus::core::gfx::Font
            /// A class representing a font used with the non-native Morpheus
            /// text engine used in TextBase. Custom fonts are supported and can
            /// be generated through the generate_fonts python script
            /// (buildtools/generate_fonts/generate_fonts.py). For an example of
            /// the custom font and Morpheus text engine being used, see Custom
            /// Font Test (tests/custom_font_test/custom_font_test.cpp).
        }
    }
}

#endif //MORPHEUS_GBA_TEST_FONT_HPP
